<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[UILabel限制最大字数]]></title>
      <url>/2017/06/22/UILabel%E9%99%90%E5%88%B6%E6%9C%80%E5%A4%A7%E5%AD%97%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>最近项目里要求一些label要限制字数，超出以后打点。由于cell里面的布局可能很复杂，其他的控件可能需要依赖label的布局，所以不能直接把label设置成一个固定长度。</p>
<p>看了一圈发现网上没有太好的解决办法，不过StackOverflow的一个帖子给了一些启发，就记录一下。</p>
<a id="more"></a>
<h3 id="之前的方案"><a href="#之前的方案" class="headerlink" title="之前的方案"></a>之前的方案</h3><p>项目之前的方案是判断label.text的长度，超过就在末尾加”…”。类似于这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSString *subject = @&quot;test&quot;;</div><div class="line">subject = subject.length &gt; 20 ? [[subject substringToIndex:18] stringByAppendingString:@&quot;...&quot;] : subject;</div><div class="line">self.subjectLabel.text = subject;</div></pre></td></tr></table></figure>
<p>这个方案的问题在于要是需求变成中间打点就不好改了。</p>
<h3 id="目前方案"><a href="#目前方案" class="headerlink" title="目前方案"></a>目前方案</h3><p>找解决办法的过程中看到了StackOverFlow的这个帖子<a href="https://stackoverflow.com/questions/13067839/how-do-i-sizetofit-a-uilabel-by-changing-only-the-height-and-not-the-width" target="_blank" rel="external">How do I sizeToFit a UILabel by changing only the height and not the width?</a>，最顶的答案用了sizeWithFont来计算label的大小。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">CGSize size = [label.text sizeWithFont:label.font</div><div class="line">                     constrainedToSize:CGSizeMake(maxWidth, MAXFLOAT)</div><div class="line">                         lineBreakMode:UILineBreakModeWordWrap]; </div><div class="line">CGRect labelFrame = label.frame;</div><div class="line">labelFrame.size.height = size.height;</div><div class="line">label.frame = labelFrame;</div></pre></td></tr></table></figure>
<p>不过<a href="https://developer.apple.com/documentation/foundation/nsstring/1619917-sizewithfont" target="_blank" rel="external">sizeWithFont:</a>在iOS7以后就不被苹果推荐使用了，取而代之的是<a href="https://developer.apple.com/documentation/foundation/nsstring/1531844-sizewithattributes?language=objc" target="_blank" rel="external">sizeWithAttributes:</a>。</p>
<p>所以在label的getter里先设置font、numberOfLines、lineBreakMode等属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (UILabel *)nameLabel &#123;</div><div class="line">    if (!_nameLabel) &#123;</div><div class="line">        _nameLabel           = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, 50, 10)];</div><div class="line">        _nameLabel.font      = [UIFont systemFontOfSize:15 weight:UIFontWeightSemibold];</div><div class="line">        _nameLabel.numberOfLines = 1;</div><div class="line">        _nameLabel.lineBreakMode = NSLineBreakByTruncatingTail;</div><div class="line">    &#125;</div><div class="line">    return _nameLabel;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后写cell的layoutSubviews方法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (void)layoutSubviews &#123;</div><div class="line">    // ...</div><div class="line">	CGSize sizeOfNameLabel     = [self.nameLabel.text sizeWithAttributes:@&#123;NSFontAttributeName:self.nameLabel.font&#125;];</div><div class="line">    if (sizeOfNameLabel.width &lt; kNameLabelMaxWidth) &#123;</div><div class="line">        [self.nameLabel sizeToFit];</div><div class="line">    &#125; else &#123;</div><div class="line">        self.nameLabel.height  = sizeOfNameLabel.height;</div><div class="line">        self.nameLabel.width   = kNameLabelMaxWidth;</div><div class="line">    &#125;</div><div class="line">    // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先用sizeWithAttributes:方法设置label的字体属性，从而获取label的大小，然后根据label的宽度是否超过最大宽度来决定让label自适应大小还是定为最大宽度。</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AFNetworking中的设计模式之工厂模式]]></title>
      <url>/2017/05/31/AFNetWorking%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><a href="https://zh.wikipedia.org/wiki/工厂方法" target="_blank" rel="external">工厂方法模式</a>(Factory Method Pattern)又称为工厂模式，属于创建型模式。在工厂方法模式中，工厂父类负责定义创建产品对象的公共接口，而工厂子类负责生成具体的产品对象，这样的目的是将产品类的实例化操作延迟到工厂子类中完成，即通过工厂子类来确定究竟应该实例化哪一个具体产品类。</p>
<a id="more"></a>
<h2 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h2><p>Objective-C中没有类似于CPP和Java的abstract class，不过可以用protocol来实现类似的效果。在<a href="https://github.com/AFNetworking/AFNetworking#serialization" target="_blank" rel="external">AFNetworking</a>中，HTTP协议的请求模块AFHTTPRequestSerializer、AFJSONRequestSerializer、AFPropertyListRequestSerializer都遵循了<a href="https://github.com/AFNetworking/AFNetworking/blob/master/AFNetworking/AFURLRequestSerialization.h" target="_blank" rel="external">AFURLRequestSerialization</a>(以下都以AFHTTPRequestSerializer为例)：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@interface AFHTTPRequestSerializer : NSObject &lt;AFURLRequestSerialization&gt;</div></pre></td></tr></table></figure>
<p>AFURLRequestSerialization的定义是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@protocol AFURLRequestSerialization &lt;NSObject, NSSecureCoding, NSCopying&gt;</div><div class="line">- (nullable NSURLRequest *)requestBySerializingRequest:(NSURLRequest *)request</div><div class="line">                               withParameters:(nullable id)parameters</div><div class="line">                                        error:(NSError * _Nullable __autoreleasing *)error NS_SWIFT_NOTHROW;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>在AFNetworking的实现中，抽象产品和抽象工厂都是AFURLRequestSerialization，具体产品和具体工厂都是AFHTTPRequestSerializer。模式结构图如下所示：</p>
<p><img src="http://7xwok9.com1.z0.glb.clouddn.com/AF_FactoryPattern.png" alt="模式结构"></p>
<h2 id="模式分析"><a href="#模式分析" class="headerlink" title="模式分析"></a>模式分析</h2><p>工厂模式中，工厂方法用来创建用户所需的产品，同时隐藏了具体产品的创建和初始化的细节。</p>
<p>AFNetworking中，AFHTTPRequestSerializer工厂类用+ (instancetype)serializer作为工厂方法，返回AFHTTPRequestSerializer产品实例，隐藏了自身的初始化细节。</p>
]]></content>
      
        <categories>
            
            <category> iOS开发 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> AFNetworking </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo标签插件]]></title>
      <url>/2017/05/24/%E5%86%85%E7%BD%AE%E6%A0%87%E7%AD%BE/</url>
      <content type="html"><![CDATA[<p>标签插件是用于在文章中快速插入特定内容的插件。</p>
<a id="more"></a>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[链接文字](链接地址)</div><div class="line">例子： [Markdown](http://zh.wikipedia.com/wiki/Markdown)</div></pre></td></tr></table></figure>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;</div><div class="line">code snippet</div><div class="line">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">​``` [language] [title] [url] [link text] code snippet</div></pre></td></tr></table></figure>
<h2 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h2><p>在文章中插入引言，可包含作者、来源和标题。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</div><div class="line">content</div><div class="line">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>
<h3 id="引用网上的文章-例"><a href="#引用网上的文章-例" class="headerlink" title="引用网上的文章(例)"></a>引用网上的文章(例)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;</div><div class="line">Every interaction is both precious and an opportunity to delight.</div><div class="line">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure>
<h2 id="文本居中的引用"><a href="#文本居中的引用" class="headerlink" title="文本居中的引用"></a>文本居中的引用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 其中 class="blockquote-center" 是必须的 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">"blockquote-center"</span>&gt;</span>blah<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></div></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 标签 方式 --&gt;</span></div><div class="line">&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 标签别名 --&gt;</span></div><div class="line">&#123;% cq %&#125; blah blah blah &#123;% endcq %&#125;</div></pre></td></tr></table></figure>
<h2 id="突破容器宽度限制的图片"><a href="#突破容器宽度限制的图片" class="headerlink" title="突破容器宽度限制的图片"></a>突破容器宽度限制的图片</h2><p>当使用此标签引用图片时，图片将自动扩大 26%，并突破文章容器的宽度。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 其中 class="full-image" 是必须的 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/image-url"</span> <span class="attr">class</span>=<span class="string">"full-image"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 标签方式，要求版本在0.4.5或以上 --&gt;</span></div><div class="line">&#123;% fullimage /image-url, alt, title %&#125;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 标签别名 --&gt;</span></div><div class="line">&#123;% fi /image-url, alt, title %&#125;</div></pre></td></tr></table></figure>
<h2 id="Bootstrap-Callout"><a href="#Bootstrap-Callout" class="headerlink" title="Bootstrap Callout"></a>Bootstrap Callout</h2><p>具体用法看<a href="https://almostover.ru/2016-01/hexo-theme-next-test/" target="_blank" rel="external">Hexo Theme Next Highlight diff style</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% note class_name %&#125; Content (md partial supported) &#123;% endnote %&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo发布指南]]></title>
      <url>/2017/05/23/FirstTest/</url>
      <content type="html"><![CDATA[<p>相当于每次换主题时候的备忘录，免得老是翻别人的博客。</p>
<a id="more"></a>
<h2 id="更新搜索器algolia-index"><a href="#更新搜索器algolia-index" class="headerlink" title="更新搜索器algolia index"></a>更新搜索器algolia index</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo algolia --config _config.yml,_config.private.yml</div></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s</div></pre></td></tr></table></figure>
<p>测试服务启动，之后可以在浏览器中输入<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000</a> 访问。</p>
<h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>测试没问题后，生成静态网页文件发布至Github pages 中。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 备忘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
